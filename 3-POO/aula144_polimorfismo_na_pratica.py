# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ]

from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, menssagem):
        self.mensagem = menssagem

    @abstractmethod
    def enviar(self) -> bool: ...

class Notifi√ß√£oEmail(Notificacao):

    def enviar(self) -> bool:
        print('E-mail, enviado - ', self.mensagem)
        return True


class Notifi√ß√£oSMS(Notificacao):

    def enviar(self) -> bool:
        print('SMS, enviado - ', self.mensagem)
        return True

def notificar(notificacao: Notificacao):
    notificacao_eviada = notificacao.enviar()

    if notificacao_eviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificar(Notifi√ß√£oEmail('TESTANDO EMAIL'))
notificar(Notifi√ß√£oSMS('TESTANDO SMS'))
